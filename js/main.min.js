var $, $$; // detect library linked to $ first

if (!$) {
  $ = document.querySelector.bind(document);
  $$ = document.querySelectorAll.bind(document);
}

var KasetteUtils = {
  eventAdder: function (selector, eventName, callback) {
    var targets = $$(selector) || [],
        tLength = targets.length;

    for (var i = 0; i < tLength; i++) {
      targets[i].addEventListener(eventName, callback);
    }

    return targets;
  },
  extendObject: function (obj, el) {
    Object.keys(el).forEach(function (key) {
      obj[key] = el[key];
    });
    return obj;
  },
  getLocation: function (el) {
    var boundingClientRect = el.getBoundingClientRect();
    extendObject(boundingClientRect, {
      width: boundingClientRect.right - boundingClientRect.left,
      height: boundingClientRect.bottom - boundingClientRect.top
    });
    return boundingClientRect;
  },
  nodeListToArray: function (nodeList) {
    return Array.prototype.slice.call(nodeList);
  }
};
const Kasette = {
  // events
  ev: {
    'click .toggleButton': 'injectScripts'
  },
  // functions
  f: {
    injectScripts() {
      chrome.tabs.query({
        active: true,
        currentWindow: true
      }, tabs => {
        const activeTab = tabs[0];
        chrome.tabs.executeScript(activeTab.id, {
          file: 'js/injected.min.js'
        });
      });
    }

  }
};

Kasette.init = () => {
  // add event listeners
  Object.keys(Kasette.ev).forEach(identifier => {
    var eventName = identifier.split(" ")[0],
        selector = identifier.split(" ").splice(1).join(" "),
        fn = Kasette.f[Kasette.ev[identifier]].bind(Kasette.f);
    KasetteUtils.eventAdder(selector, eventName, fn);
  });
};

Kasette.init();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzLmpzIiwibWFpbi5qcyJdLCJuYW1lcyI6WyIkIiwiJCQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJiaW5kIiwicXVlcnlTZWxlY3RvckFsbCIsIkthc2V0dGVVdGlscyIsImV2ZW50QWRkZXIiLCJzZWxlY3RvciIsImV2ZW50TmFtZSIsImNhbGxiYWNrIiwidGFyZ2V0cyIsInRMZW5ndGgiLCJsZW5ndGgiLCJpIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV4dGVuZE9iamVjdCIsIm9iaiIsImVsIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJnZXRMb2NhdGlvbiIsImJvdW5kaW5nQ2xpZW50UmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIndpZHRoIiwicmlnaHQiLCJsZWZ0IiwiaGVpZ2h0IiwiYm90dG9tIiwidG9wIiwibm9kZUxpc3RUb0FycmF5Iiwibm9kZUxpc3QiLCJBcnJheSIsInByb3RvdHlwZSIsInNsaWNlIiwiY2FsbCIsIkthc2V0dGUiLCJldiIsImYiLCJpbmplY3RTY3JpcHRzIiwiY2hyb21lIiwidGFicyIsInF1ZXJ5IiwiYWN0aXZlIiwiY3VycmVudFdpbmRvdyIsImFjdGl2ZVRhYiIsImV4ZWN1dGVTY3JpcHQiLCJpZCIsImZpbGUiLCJpbml0IiwiaWRlbnRpZmllciIsInNwbGl0Iiwic3BsaWNlIiwiam9pbiIsImZuIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxDQUFKLEVBQU9DLEVBQVAsQyxDQUVBOztBQUNBLElBQUksQ0FBQ0QsQ0FBTCxFQUFRO0FBQ0pBLE1BQUlFLFNBQVNDLGFBQVQsQ0FBdUJDLElBQXZCLENBQTRCRixRQUE1QixDQUFKO0FBQ0FELE9BQUtDLFNBQVNHLGdCQUFULENBQTBCRCxJQUExQixDQUErQkYsUUFBL0IsQ0FBTDtBQUNIOztBQUVELElBQUlJLGVBQWU7QUFFZkMsY0FBWSxVQUFTQyxRQUFULEVBQW1CQyxTQUFuQixFQUE4QkMsUUFBOUIsRUFBd0M7QUFDaEQsUUFBSUMsVUFBVVYsR0FBR08sUUFBSCxLQUFnQixFQUE5QjtBQUFBLFFBQ0lJLFVBQVVELFFBQVFFLE1BRHRCOztBQUdBLFNBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJRixPQUFwQixFQUE2QkUsR0FBN0IsRUFBa0M7QUFDOUJILGNBQVFHLENBQVIsRUFBV0MsZ0JBQVgsQ0FBNEJOLFNBQTVCLEVBQXVDQyxRQUF2QztBQUNIOztBQUVELFdBQU9DLE9BQVA7QUFDSCxHQVhjO0FBYWZLLGdCQUFjLFVBQVNDLEdBQVQsRUFBY0MsRUFBZCxFQUFrQjtBQUU1QkMsV0FBT0MsSUFBUCxDQUFZRixFQUFaLEVBQWdCRyxPQUFoQixDQUF3QixVQUFTQyxHQUFULEVBQWM7QUFDbENMLFVBQUlLLEdBQUosSUFBV0osR0FBR0ksR0FBSCxDQUFYO0FBQ0gsS0FGRDtBQUlBLFdBQU9MLEdBQVA7QUFFSCxHQXJCYztBQXVCZk0sZUFBYSxVQUFTTCxFQUFULEVBQWE7QUFFdEIsUUFBSU0scUJBQXFCTixHQUFHTyxxQkFBSCxFQUF6QjtBQUVBVCxpQkFBYVEsa0JBQWIsRUFBaUM7QUFDN0JFLGFBQU9GLG1CQUFtQkcsS0FBbkIsR0FBMkJILG1CQUFtQkksSUFEeEI7QUFFN0JDLGNBQVFMLG1CQUFtQk0sTUFBbkIsR0FBNEJOLG1CQUFtQk87QUFGMUIsS0FBakM7QUFLQSxXQUFPUCxrQkFBUDtBQUVILEdBbENjO0FBb0NmUSxtQkFBaUIsVUFBU0MsUUFBVCxFQUFtQjtBQUNoQyxXQUFPQyxNQUFNQyxTQUFOLENBQWdCQyxLQUFoQixDQUFzQkMsSUFBdEIsQ0FBMkJKLFFBQTNCLENBQVA7QUFDSDtBQXRDYyxDQUFuQjtBQ1JBLE1BQU1LLFVBQVU7QUFFWjtBQUNBQyxNQUFJO0FBQ0EsMkJBQXVCO0FBRHZCLEdBSFE7QUFPWjtBQUNBQyxLQUFHO0FBQ0NDLG9CQUFnQjtBQUNaQyxhQUFPQyxJQUFQLENBQVlDLEtBQVosQ0FBa0I7QUFDZEMsZ0JBQVEsSUFETTtBQUVkQyx1QkFBZTtBQUZELE9BQWxCLEVBR0dILFFBQVE7QUFDUCxjQUFNSSxZQUFZSixLQUFLLENBQUwsQ0FBbEI7QUFFQUQsZUFBT0MsSUFBUCxDQUFZSyxhQUFaLENBQTBCRCxVQUFVRSxFQUFwQyxFQUF3QztBQUNwQ0MsZ0JBQU07QUFEOEIsU0FBeEM7QUFHSCxPQVREO0FBVUg7O0FBWkY7QUFSUyxDQUFoQjs7QUF5QkFaLFFBQVFhLElBQVIsR0FBZSxNQUFNO0FBQ2pCO0FBQ0FoQyxTQUFPQyxJQUFQLENBQVlrQixRQUFRQyxFQUFwQixFQUF3QmxCLE9BQXhCLENBQWdDK0IsY0FBYztBQUMxQyxRQUFJM0MsWUFBWTJDLFdBQVdDLEtBQVgsQ0FBaUIsR0FBakIsRUFBc0IsQ0FBdEIsQ0FBaEI7QUFBQSxRQUNJN0MsV0FBVzRDLFdBQVdDLEtBQVgsQ0FBaUIsR0FBakIsRUFBc0JDLE1BQXRCLENBQTZCLENBQTdCLEVBQWdDQyxJQUFoQyxDQUFxQyxHQUFyQyxDQURmO0FBQUEsUUFFSUMsS0FBS2xCLFFBQVFFLENBQVIsQ0FBVUYsUUFBUUMsRUFBUixDQUFXYSxVQUFYLENBQVYsRUFBa0NoRCxJQUFsQyxDQUF1Q2tDLFFBQVFFLENBQS9DLENBRlQ7QUFJQWxDLGlCQUFhQyxVQUFiLENBQXdCQyxRQUF4QixFQUFrQ0MsU0FBbEMsRUFBNkMrQyxFQUE3QztBQUNILEdBTkQ7QUFPSCxDQVREOztBQVdBbEIsUUFBUWEsSUFBUiIsImZpbGUiOiJqcy9tYWluLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciAkLCAkJDtcblxuLy8gZGV0ZWN0IGxpYnJhcnkgbGlua2VkIHRvICQgZmlyc3RcbmlmICghJCkge1xuICAgICQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yLmJpbmQoZG9jdW1lbnQpO1xuICAgICQkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbC5iaW5kKGRvY3VtZW50KTtcbn1cblxudmFyIEthc2V0dGVVdGlscyA9IHtcblxuICAgIGV2ZW50QWRkZXI6IGZ1bmN0aW9uKHNlbGVjdG9yLCBldmVudE5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciB0YXJnZXRzID0gJCQoc2VsZWN0b3IpIHx8IFtdLFxuICAgICAgICAgICAgdExlbmd0aCA9IHRhcmdldHMubGVuZ3RoO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdExlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0YXJnZXRzW2ldLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBjYWxsYmFjayk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0cztcbiAgICB9LFxuXG4gICAgZXh0ZW5kT2JqZWN0OiBmdW5jdGlvbihvYmosIGVsKSB7XG5cbiAgICAgICAgT2JqZWN0LmtleXMoZWwpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICBvYmpba2V5XSA9IGVsW2tleV07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBvYmo7XG5cbiAgICB9LFxuXG4gICAgZ2V0TG9jYXRpb246IGZ1bmN0aW9uKGVsKSB7XG5cbiAgICAgICAgdmFyIGJvdW5kaW5nQ2xpZW50UmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgIGV4dGVuZE9iamVjdChib3VuZGluZ0NsaWVudFJlY3QsIHtcbiAgICAgICAgICAgIHdpZHRoOiBib3VuZGluZ0NsaWVudFJlY3QucmlnaHQgLSBib3VuZGluZ0NsaWVudFJlY3QubGVmdCxcbiAgICAgICAgICAgIGhlaWdodDogYm91bmRpbmdDbGllbnRSZWN0LmJvdHRvbSAtIGJvdW5kaW5nQ2xpZW50UmVjdC50b3BcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGJvdW5kaW5nQ2xpZW50UmVjdDtcblxuICAgIH0sXG5cbiAgICBub2RlTGlzdFRvQXJyYXk6IGZ1bmN0aW9uKG5vZGVMaXN0KSB7XG4gICAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChub2RlTGlzdCk7XG4gICAgfVxuXG59O1xuIiwiY29uc3QgS2FzZXR0ZSA9IHtcblxuICAgIC8vIGV2ZW50c1xuICAgIGV2OiB7XG4gICAgICAgICdjbGljayAudG9nZ2xlQnV0dG9uJzogJ2luamVjdFNjcmlwdHMnLFxuICAgIH0sXG5cbiAgICAvLyBmdW5jdGlvbnNcbiAgICBmOiB7XG4gICAgICAgIGluamVjdFNjcmlwdHMoKSB7XG4gICAgICAgICAgICBjaHJvbWUudGFicy5xdWVyeSh7XG4gICAgICAgICAgICAgICAgYWN0aXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRXaW5kb3c6IHRydWUsXG4gICAgICAgICAgICB9LCB0YWJzID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBhY3RpdmVUYWIgPSB0YWJzWzBdO1xuXG4gICAgICAgICAgICAgICAgY2hyb21lLnRhYnMuZXhlY3V0ZVNjcmlwdChhY3RpdmVUYWIuaWQsIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsZTogJ2pzL2luamVjdGVkLm1pbi5qcycsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICB9XG5cbn07XG5cbkthc2V0dGUuaW5pdCA9ICgpID0+IHtcbiAgICAvLyBhZGQgZXZlbnQgbGlzdGVuZXJzXG4gICAgT2JqZWN0LmtleXMoS2FzZXR0ZS5ldikuZm9yRWFjaChpZGVudGlmaWVyID0+IHtcbiAgICAgICAgdmFyIGV2ZW50TmFtZSA9IGlkZW50aWZpZXIuc3BsaXQoXCIgXCIpWzBdLFxuICAgICAgICAgICAgc2VsZWN0b3IgPSBpZGVudGlmaWVyLnNwbGl0KFwiIFwiKS5zcGxpY2UoMSkuam9pbihcIiBcIiksXG4gICAgICAgICAgICBmbiA9IEthc2V0dGUuZltLYXNldHRlLmV2W2lkZW50aWZpZXJdXS5iaW5kKEthc2V0dGUuZik7XG5cbiAgICAgICAgS2FzZXR0ZVV0aWxzLmV2ZW50QWRkZXIoc2VsZWN0b3IsIGV2ZW50TmFtZSwgZm4pO1xuICAgIH0pO1xufTtcblxuS2FzZXR0ZS5pbml0KCk7XG4iXX0=
