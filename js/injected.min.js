var $, $$; // detect library linked to $ first

if (!$) {
  $ = document.querySelector.bind(document);
  $$ = document.querySelectorAll.bind(document);
}

var KasetteUtils = {
  eventAdder: function (selector, eventName, callback) {
    var targets = $$(selector) || [],
        tLength = targets.length;

    for (var i = 0; i < tLength; i++) {
      targets[i].addEventListener(eventName, callback);
    }

    return targets;
  },
  extendObject: function (obj, el) {
    Object.keys(el).forEach(function (key) {
      obj[key] = el[key];
    });
    return obj;
  },
  getLocation: function (el) {
    var boundingClientRect = el.getBoundingClientRect();
    extendObject(boundingClientRect, {
      width: boundingClientRect.right - boundingClientRect.left,
      height: boundingClientRect.bottom - boundingClientRect.top
    });
    return boundingClientRect;
  },
  nodeListToArray: function (nodeList) {
    return Array.prototype.slice.call(nodeList);
  }
};
(function () {
  const PLAY_STATE_CHECK_TIMER = 1500;
  const NAMESPACED_PLAYSTATE = '__kasette_autorepeat_enabled';
  const playButtons = $$('.ytp-play-button');
  let checkTimer;

  if (playButtons.length < 1) {
    alert('Are you sure you\'re watching a YouTube video? Kasette couldn\'t find one...');
  } else {
    const pb = playButtons[0];

    const enable = () => {
      checkTimer = setInterval(() => {
        if (pb.getAttribute('title') === 'Replay') {
          pb.click();
        } else if (!window.location.href.includes('//www.youtube.com/watch')) {
          disable();
        }
      }, PLAY_STATE_CHECK_TIMER);
      window[NAMESPACED_PLAYSTATE] = true;
      alert('Kasette auto-repeat enabled!');
    };

    const disable = () => {
      clearInterval(checkTimer);
      alert('Kasette auto-repeat disabled!');
      window[NAMESPACED_PLAYSTATE] = false;
    };

    if (window[NAMESPACED_PLAYSTATE]) {
      disable();
    } else {
      enable();
    }
  }
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzLmpzIiwiaW5qZWN0ZWQuanMiXSwibmFtZXMiOlsiJCIsIiQkIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiYmluZCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJLYXNldHRlVXRpbHMiLCJldmVudEFkZGVyIiwic2VsZWN0b3IiLCJldmVudE5hbWUiLCJjYWxsYmFjayIsInRhcmdldHMiLCJ0TGVuZ3RoIiwibGVuZ3RoIiwiaSIsImFkZEV2ZW50TGlzdGVuZXIiLCJleHRlbmRPYmplY3QiLCJvYmoiLCJlbCIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwia2V5IiwiZ2V0TG9jYXRpb24iLCJib3VuZGluZ0NsaWVudFJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ3aWR0aCIsInJpZ2h0IiwibGVmdCIsImhlaWdodCIsImJvdHRvbSIsInRvcCIsIm5vZGVMaXN0VG9BcnJheSIsIm5vZGVMaXN0IiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImNhbGwiLCJQTEFZX1NUQVRFX0NIRUNLX1RJTUVSIiwiTkFNRVNQQUNFRF9QTEFZU1RBVEUiLCJwbGF5QnV0dG9ucyIsImNoZWNrVGltZXIiLCJhbGVydCIsInBiIiwiZW5hYmxlIiwic2V0SW50ZXJ2YWwiLCJnZXRBdHRyaWJ1dGUiLCJjbGljayIsIndpbmRvdyIsImxvY2F0aW9uIiwiaHJlZiIsImluY2x1ZGVzIiwiZGlzYWJsZSIsImNsZWFySW50ZXJ2YWwiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLENBQUosRUFBT0MsRUFBUCxDLENBRUE7O0FBQ0EsSUFBSSxDQUFDRCxDQUFMLEVBQVE7QUFDSkEsTUFBSUUsU0FBU0MsYUFBVCxDQUF1QkMsSUFBdkIsQ0FBNEJGLFFBQTVCLENBQUo7QUFDQUQsT0FBS0MsU0FBU0csZ0JBQVQsQ0FBMEJELElBQTFCLENBQStCRixRQUEvQixDQUFMO0FBQ0g7O0FBRUQsSUFBSUksZUFBZTtBQUVmQyxjQUFZLFVBQVNDLFFBQVQsRUFBbUJDLFNBQW5CLEVBQThCQyxRQUE5QixFQUF3QztBQUNoRCxRQUFJQyxVQUFVVixHQUFHTyxRQUFILEtBQWdCLEVBQTlCO0FBQUEsUUFDSUksVUFBVUQsUUFBUUUsTUFEdEI7O0FBR0EsU0FBSyxJQUFJQyxJQUFJLENBQWIsRUFBZ0JBLElBQUlGLE9BQXBCLEVBQTZCRSxHQUE3QixFQUFrQztBQUM5QkgsY0FBUUcsQ0FBUixFQUFXQyxnQkFBWCxDQUE0Qk4sU0FBNUIsRUFBdUNDLFFBQXZDO0FBQ0g7O0FBRUQsV0FBT0MsT0FBUDtBQUNILEdBWGM7QUFhZkssZ0JBQWMsVUFBU0MsR0FBVCxFQUFjQyxFQUFkLEVBQWtCO0FBRTVCQyxXQUFPQyxJQUFQLENBQVlGLEVBQVosRUFBZ0JHLE9BQWhCLENBQXdCLFVBQVNDLEdBQVQsRUFBYztBQUNsQ0wsVUFBSUssR0FBSixJQUFXSixHQUFHSSxHQUFILENBQVg7QUFDSCxLQUZEO0FBSUEsV0FBT0wsR0FBUDtBQUVILEdBckJjO0FBdUJmTSxlQUFhLFVBQVNMLEVBQVQsRUFBYTtBQUV0QixRQUFJTSxxQkFBcUJOLEdBQUdPLHFCQUFILEVBQXpCO0FBRUFULGlCQUFhUSxrQkFBYixFQUFpQztBQUM3QkUsYUFBT0YsbUJBQW1CRyxLQUFuQixHQUEyQkgsbUJBQW1CSSxJQUR4QjtBQUU3QkMsY0FBUUwsbUJBQW1CTSxNQUFuQixHQUE0Qk4sbUJBQW1CTztBQUYxQixLQUFqQztBQUtBLFdBQU9QLGtCQUFQO0FBRUgsR0FsQ2M7QUFvQ2ZRLG1CQUFpQixVQUFTQyxRQUFULEVBQW1CO0FBQ2hDLFdBQU9DLE1BQU1DLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQkosUUFBM0IsQ0FBUDtBQUNIO0FBdENjLENBQW5CO0FDUkEsQ0FBQyxZQUFZO0FBQ1QsUUFBTUsseUJBQXlCLElBQS9CO0FBQ0EsUUFBTUMsdUJBQXVCLDhCQUE3QjtBQUVBLFFBQU1DLGNBQWN2QyxHQUFHLGtCQUFILENBQXBCO0FBRUEsTUFBSXdDLFVBQUo7O0FBRUEsTUFBSUQsWUFBWTNCLE1BQVosR0FBcUIsQ0FBekIsRUFBNEI7QUFDeEI2QixVQUFNLDhFQUFOO0FBQ0gsR0FGRCxNQUVPO0FBQ0gsVUFBTUMsS0FBS0gsWUFBWSxDQUFaLENBQVg7O0FBQ0EsVUFBTUksU0FBUyxNQUFNO0FBQ2pCSCxtQkFBYUksWUFBWSxNQUFNO0FBQzNCLFlBQUlGLEdBQUdHLFlBQUgsQ0FBZ0IsT0FBaEIsTUFBNkIsUUFBakMsRUFBMkM7QUFDdkNILGFBQUdJLEtBQUg7QUFDSCxTQUZELE1BRU8sSUFBSSxDQUFDQyxPQUFPQyxRQUFQLENBQWdCQyxJQUFoQixDQUFxQkMsUUFBckIsQ0FBOEIseUJBQTlCLENBQUwsRUFBK0Q7QUFDbEVDO0FBQ0g7QUFDSixPQU5ZLEVBTVZkLHNCQU5VLENBQWI7QUFPQVUsYUFBT1Qsb0JBQVAsSUFBK0IsSUFBL0I7QUFDQUcsWUFBTSw4QkFBTjtBQUNILEtBVkQ7O0FBV0EsVUFBTVUsVUFBVSxNQUFNO0FBQ2xCQyxvQkFBY1osVUFBZDtBQUNBQyxZQUFNLCtCQUFOO0FBQ0FNLGFBQU9ULG9CQUFQLElBQStCLEtBQS9CO0FBQ0gsS0FKRDs7QUFLQSxRQUFJUyxPQUFPVCxvQkFBUCxDQUFKLEVBQWtDO0FBQzlCYTtBQUNILEtBRkQsTUFFTztBQUNIUjtBQUNIO0FBQ0o7QUFDSixDQWxDRCIsImZpbGUiOiJqcy9pbmplY3RlZC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgJCwgJCQ7XG5cbi8vIGRldGVjdCBsaWJyYXJ5IGxpbmtlZCB0byAkIGZpcnN0XG5pZiAoISQpIHtcbiAgICAkID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvci5iaW5kKGRvY3VtZW50KTtcbiAgICAkJCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwuYmluZChkb2N1bWVudCk7XG59XG5cbnZhciBLYXNldHRlVXRpbHMgPSB7XG5cbiAgICBldmVudEFkZGVyOiBmdW5jdGlvbihzZWxlY3RvciwgZXZlbnROYW1lLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgdGFyZ2V0cyA9ICQkKHNlbGVjdG9yKSB8fCBbXSxcbiAgICAgICAgICAgIHRMZW5ndGggPSB0YXJnZXRzLmxlbmd0aDtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGFyZ2V0c1tpXS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgY2FsbGJhY2spO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldHM7XG4gICAgfSxcblxuICAgIGV4dGVuZE9iamVjdDogZnVuY3Rpb24ob2JqLCBlbCkge1xuXG4gICAgICAgIE9iamVjdC5rZXlzKGVsKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgb2JqW2tleV0gPSBlbFtrZXldO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gb2JqO1xuXG4gICAgfSxcblxuICAgIGdldExvY2F0aW9uOiBmdW5jdGlvbihlbCkge1xuXG4gICAgICAgIHZhciBib3VuZGluZ0NsaWVudFJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICBleHRlbmRPYmplY3QoYm91bmRpbmdDbGllbnRSZWN0LCB7XG4gICAgICAgICAgICB3aWR0aDogYm91bmRpbmdDbGllbnRSZWN0LnJpZ2h0IC0gYm91bmRpbmdDbGllbnRSZWN0LmxlZnQsXG4gICAgICAgICAgICBoZWlnaHQ6IGJvdW5kaW5nQ2xpZW50UmVjdC5ib3R0b20gLSBib3VuZGluZ0NsaWVudFJlY3QudG9wXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBib3VuZGluZ0NsaWVudFJlY3Q7XG5cbiAgICB9LFxuXG4gICAgbm9kZUxpc3RUb0FycmF5OiBmdW5jdGlvbihub2RlTGlzdCkge1xuICAgICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobm9kZUxpc3QpO1xuICAgIH1cblxufTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgUExBWV9TVEFURV9DSEVDS19USU1FUiA9IDE1MDA7XG4gICAgY29uc3QgTkFNRVNQQUNFRF9QTEFZU1RBVEUgPSAnX19rYXNldHRlX2F1dG9yZXBlYXRfZW5hYmxlZCc7XG5cbiAgICBjb25zdCBwbGF5QnV0dG9ucyA9ICQkKCcueXRwLXBsYXktYnV0dG9uJyk7XG5cbiAgICBsZXQgY2hlY2tUaW1lcjtcblxuICAgIGlmIChwbGF5QnV0dG9ucy5sZW5ndGggPCAxKSB7XG4gICAgICAgIGFsZXJ0KCdBcmUgeW91IHN1cmUgeW91XFwncmUgd2F0Y2hpbmcgYSBZb3VUdWJlIHZpZGVvPyBLYXNldHRlIGNvdWxkblxcJ3QgZmluZCBvbmUuLi4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBwYiA9IHBsYXlCdXR0b25zWzBdO1xuICAgICAgICBjb25zdCBlbmFibGUgPSAoKSA9PiB7XG4gICAgICAgICAgICBjaGVja1RpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwYi5nZXRBdHRyaWJ1dGUoJ3RpdGxlJykgPT09ICdSZXBsYXknKSB7XG4gICAgICAgICAgICAgICAgICAgIHBiLmNsaWNrKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghd2luZG93LmxvY2F0aW9uLmhyZWYuaW5jbHVkZXMoJy8vd3d3LnlvdXR1YmUuY29tL3dhdGNoJykpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIFBMQVlfU1RBVEVfQ0hFQ0tfVElNRVIpO1xuICAgICAgICAgICAgd2luZG93W05BTUVTUEFDRURfUExBWVNUQVRFXSA9IHRydWU7XG4gICAgICAgICAgICBhbGVydCgnS2FzZXR0ZSBhdXRvLXJlcGVhdCBlbmFibGVkIScpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRpc2FibGUgPSAoKSA9PiB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKGNoZWNrVGltZXIpO1xuICAgICAgICAgICAgYWxlcnQoJ0thc2V0dGUgYXV0by1yZXBlYXQgZGlzYWJsZWQhJyk7XG4gICAgICAgICAgICB3aW5kb3dbTkFNRVNQQUNFRF9QTEFZU1RBVEVdID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdpbmRvd1tOQU1FU1BBQ0VEX1BMQVlTVEFURV0pIHtcbiAgICAgICAgICAgIGRpc2FibGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVuYWJsZSgpO1xuICAgICAgICB9XG4gICAgfVxufSkoKTtcbiJdfQ==
